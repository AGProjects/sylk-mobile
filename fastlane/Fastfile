# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

fastlane_version '2.140.0'

#before_all do
#  ensure_git_branch
#  ensure_git_status_clean
#  git_pull
#end

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do

    increment_build_number(xcodeproj: "./ios/sylk.xcodeproj")

    build_app(export_xcargs: "-allowProvisioningUpdates", workspace: "./ios/sylk.xcworkspace", scheme: "sylk")

    upload_to_testflight

  end
end

platform :ios do
  desc "Build and install release version on connected device"
  lane :install_release do
    build_app(
      scheme: "sylk",        # Replace with your app's scheme
      workspace: "ios/sylk.xcworkspace",
      export_method: "development", # Or "ad-hoc" if using ad-hoc provisioning
      export_options: {
        provisioningProfiles: {
          "com.agprojects.sylk-ios" => "Sylk Development Profile",
          "com.agprojects.sylk-ios.sylk-share" => "Sylk Share Development Profile"
        }
      },
      clean: true,
      silent: false
    )

    # Install on connected device
    install_on_device(
      ipa: lane_context[SharedValues::IPA_OUTPUT_PATH]
    )
  end
end

platform :ios do
  desc "Build and upload release version to TestFlight"
  lane :upload_testflight do
    build_app(
      scheme: "sylk",                         # Your Xcode scheme
      workspace: "ios/sylk.xcworkspace",
      export_method: "app-store",              # Important: App Store distribution
      clean: true,
      silent: false
      # Optional: Fastlane can automatically select provisioning profile for App Store
      # export_options: {
      #   provisioningProfiles: {
      #     "com.agprojects.sylk-ios" => "Sylk App Store Profile"
      #   }
      # }
    )

    # Upload the IPA to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true,  # optional: don't wait for Apple processing
      distribute_external: true
    )
  end
end

platform :android do
  desc "Push a new beta build to Google Play Store"
  lane :beta do

    gradle(task: 'clean', project_dir: "android/") # <- Fixes it

    next_version_code = increment_version_code(
      app_project_dir: '**/app',
      version_code: File.read("../android/VERSION_CODE")
    )
    UI.message(next_version_code)
    set_value_in_build(
      key: 'versionCode',
      value: next_version_code
    )

    next_version_name = increment_version_name(
      app_project_dir: '**/app',
      bump_type: 'major',
      version_name: File.read("../android/VERSION_NAME")
    )
    UI.message(next_version_name)
    set_value_in_build(
      key: 'versionName',
      value: next_version_name
    )

    gradle(task: 'bundle', build_type: 'Release', project_dir: './android/', properties: {
      "android.enableJetifier" => "true",
      "android.useAndroidX" => "true"
    })

    upload_to_play_store(
      track: 'beta',        # 'internal', 'alpha', 'beta', 'production' are also options
      package_name: 'com.agprojects.sylk',
      skip_upload_metadata: true,    # skip metadata editing
      skip_upload_changelogs: true,  # skip changelogs
      skip_upload_images: true,      # skip screenshots
      skip_upload_screenshots: true  # just in case
    )
  end
end

platform :android do
  desc "Push a new beta build to Google Play Store"
  lane :release do

    gradle(task: 'clean', project_dir: "android/") # <- Fixes it

    next_version_code = increment_version_code(
      app_project_dir: '**/app',
      version_code: File.read("../android/VERSION_CODE")
    )
    UI.message(next_version_code)
    set_value_in_build(
      key: 'versionCode',
      value: next_version_code
    )

    next_version_name = increment_version_name(
      app_project_dir: '**/app',
      bump_type: 'major',
      version_name: File.read("../android/VERSION_NAME")
    )
    UI.message(next_version_name)
    set_value_in_build(
      key: 'versionName',
      value: next_version_name
    )

    gradle(task: 'bundle', build_type: 'Release', project_dir: './android/', properties: {
      "android.enableJetifier" => "true",
      "android.useAndroidX" => "true"
    })

    upload_to_play_store(
      track: 'production',   
      package_name: 'com.agprojects.sylk',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end
end

platform :android do
  desc "Push a new beta build to Google Play Store"
  lane :build_aab do

    gradle(task: 'clean', project_dir: "android/") # <- Fixes it

    next_version_code = increment_version_code(
      app_project_dir: '**/app',
      version_code: File.read("../android/VERSION_CODE")
    )
    UI.message(next_version_code)
    set_value_in_build(
      key: 'versionCode',
      value: next_version_code
    )

    next_version_name = increment_version_name(
      app_project_dir: '**/app',
      bump_type: 'major',
      version_name: File.read("../android/VERSION_NAME")
    )
    UI.message(next_version_name)
    set_value_in_build(
      key: 'versionName',
      value: next_version_name
    )

    gradle(task: 'bundle', build_type: 'Release', project_dir: './android/', properties: {
      "android.enableJetifier" => "true",
      "android.useAndroidX" => "true"
    })

    UI.message("android/app/build/outputs/bundle/release/app-release.aab")
  end
end
