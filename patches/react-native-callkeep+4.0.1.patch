diff --git a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/Constants.java b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/Constants.java
index e0b8bc5..b48417a 100644
--- a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/Constants.java
+++ b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/Constants.java
@@ -13,7 +13,7 @@ public class Constants {
     public static final String ACTION_UNMUTE_CALL = "ACTION_UNMUTE_CALL";
     public static final String ACTION_WAKE_APP = "ACTION_WAKE_APP";
 
-    public static final String EXTRA_CALL_NUMBER = "EXTRA_CALL_NUMBER";
+    public static final String EXTRA_CALL_IDENTIFIER = "EXTRA_CALL_NUMBER";
     public static final String EXTRA_CALL_UUID = "EXTRA_CALL_UUID";
     public static final String EXTRA_CALLER_NAME = "EXTRA_CALLER_NAME";
     // Can't use telecom.EXTRA_DISABLE_ADD_CALL ...
diff --git a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepBackgroundMessagingService.java b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepBackgroundMessagingService.java
index c069072..a1e49ce 100644
--- a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepBackgroundMessagingService.java
+++ b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepBackgroundMessagingService.java
@@ -27,7 +27,7 @@ import com.facebook.react.bridge.Arguments;
 import com.facebook.react.jstasks.HeadlessJsTaskConfig;
 
 import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
-import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
+import static io.wazo.callkeep.Constants.EXTRA_CALL_IDENTIFIER;
 import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;
 
 import javax.annotation.Nullable;
diff --git a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
index 327d49b..7372350 100644
--- a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
+++ b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
@@ -44,6 +44,7 @@ import android.telecom.DisconnectCause;
 import android.telecom.PhoneAccount;
 import android.telecom.PhoneAccountHandle;
 import android.telecom.TelecomManager;
+import android.telecom.VideoProfile;
 import android.telephony.TelephonyManager;
 import android.util.Log;
 
@@ -73,7 +74,7 @@ import static androidx.core.app.ActivityCompat.requestPermissions;
 
 import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
 import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;
-import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
+import static io.wazo.callkeep.Constants.EXTRA_CALL_IDENTIFIER;
 import static io.wazo.callkeep.Constants.ACTION_END_CALL;
 import static io.wazo.callkeep.Constants.ACTION_ANSWER_CALL;
 import static io.wazo.callkeep.Constants.ACTION_MUTE_CALL;
@@ -155,20 +156,24 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
     }
 
     @ReactMethod
-    public void displayIncomingCall(String uuid, String number, String callerName) {
+    public void displayIncomingCall(String uuid, String identifier, String callerType, boolean callHasVideo, String callerName) {
         if (!isConnectionServiceAvailable() || !hasPhoneAccount()) {
             return;
         }
 
-        Log.d(TAG, "displayIncomingCall number: " + number + ", callerName: " + callerName);
+        Log.d(TAG, "displayIncomingCall identifier: " + identifier + ", callerName: " + callerName + ", callerType: " + callerType + ", callHasVideo: " + callHasVideo);
 
         Bundle extras = new Bundle();
-        Uri uri = Uri.fromParts(PhoneAccount.SCHEME_TEL, number, null);
+        Uri uri = Uri.fromParts((callerType.equals("sip") ? PhoneAccount.SCHEME_SIP : PhoneAccount.SCHEME_TEL), identifier, null);
 
         extras.putParcelable(TelecomManager.EXTRA_INCOMING_CALL_ADDRESS, uri);
         extras.putString(EXTRA_CALLER_NAME, callerName);
         extras.putString(EXTRA_CALL_UUID, uuid);
 
+        if (callHasVideo) {
+            extras.putInt(TelecomManager.EXTRA_START_CALL_WITH_VIDEO_STATE, VideoProfile.STATE_BIDIRECTIONAL);
+        }
+
         telecomManager.addNewIncomingCall(handle, extras);
     }
 
@@ -187,24 +192,28 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
     }
 
     @ReactMethod
-    public void startCall(String uuid, String number, String callerName) {
-        if (!isConnectionServiceAvailable() || !hasPhoneAccount() || !hasPermissions() || number == null) {
+    public void startCall(String uuid, String identifer, String callerName, String callerType, boolean callHasVideo) {
+        if (!isConnectionServiceAvailable() || !hasPhoneAccount() || !hasPermissions() || identifer == null) {
             return;
         }
 
-        Log.d(TAG, "startCall number: " + number + ", callerName: " + callerName);
+        Log.d(TAG, "startCall identifer: " + identifer + ", callerName: " + callerName + ", callerType: " + callerType + ", callHasVideo: " + callHasVideo);
 
         Bundle extras = new Bundle();
-        Uri uri = Uri.fromParts(PhoneAccount.SCHEME_TEL, number, null);
+        Uri uri = Uri.fromParts((callerType.equals("sip") ? PhoneAccount.SCHEME_SIP : PhoneAccount.SCHEME_TEL), identifer, null);
 
         Bundle callExtras = new Bundle();
         callExtras.putString(EXTRA_CALLER_NAME, callerName);
         callExtras.putString(EXTRA_CALL_UUID, uuid);
-        callExtras.putString(EXTRA_CALL_NUMBER, number);
+        callExtras.putString(EXTRA_CALL_IDENTIFIER, identifer);
 
         extras.putParcelable(TelecomManager.EXTRA_PHONE_ACCOUNT_HANDLE, handle);
         extras.putParcelable(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, callExtras);
 
+        if (callHasVideo) {
+            extras.putInt(TelecomManager.EXTRA_INCOMING_VIDEO_STATE, VideoProfile.STATE_BIDIRECTIONAL);
+        }
+
         telecomManager.placeCall(uri, extras);
     }
 
@@ -485,7 +494,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
             return;
         }
 
-        conn.setConnectionCapabilities(conn.getConnectionCapabilities() | Connection.CAPABILITY_HOLD);
+        conn.setConnectionCapabilities(conn.getConnectionCapabilities());
         conn.setActive();
     }
 
@@ -575,7 +584,8 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
         String appName = this.getApplicationName(this.getAppContext());
 
         PhoneAccount.Builder builder = new PhoneAccount.Builder(handle, appName)
-                .setCapabilities(PhoneAccount.CAPABILITY_CALL_PROVIDER);
+                .addSupportedUriScheme(PhoneAccount.SCHEME_SIP)
+                .setCapabilities(PhoneAccount.CAPABILITY_CALL_PROVIDER | PhoneAccount.CAPABILITY_VIDEO_CALLING);
 
         if (_settings != null && _settings.hasKey("imageName")) {
             int identifier = appContext.getResources().getIdentifier(_settings.getString("imageName"), "drawable", appContext.getPackageName());
@@ -700,7 +710,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
                     sendEventToJS("RNCallKeepDidPerformDTMFAction", args);
                     break;
                 case ACTION_ONGOING_CALL:
-                    args.putString("handle", attributeMap.get(EXTRA_CALL_NUMBER));
+                    args.putString("handle", attributeMap.get(EXTRA_CALL_IDENTIFIER));
                     args.putString("callUUID", attributeMap.get(EXTRA_CALL_UUID));
                     args.putString("name", attributeMap.get(EXTRA_CALLER_NAME));
                     sendEventToJS("RNCallKeepDidReceiveStartCallAction", args);
@@ -715,8 +725,8 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
                     Intent headlessIntent = new Intent(reactContext, RNCallKeepBackgroundMessagingService.class);
                     headlessIntent.putExtra("callUUID", attributeMap.get(EXTRA_CALL_UUID));
                     headlessIntent.putExtra("name", attributeMap.get(EXTRA_CALLER_NAME));
-                    headlessIntent.putExtra("handle", attributeMap.get(EXTRA_CALL_NUMBER));
-                    Log.d(TAG, "wakeUpApplication: " + attributeMap.get(EXTRA_CALL_UUID) + ", number : " + attributeMap.get(EXTRA_CALL_NUMBER) + ", displayName:" + attributeMap.get(EXTRA_CALLER_NAME));
+                    headlessIntent.putExtra("handle", attributeMap.get(EXTRA_CALL_IDENTIFIER));
+                    Log.d(TAG, "wakeUpApplication: " + attributeMap.get(EXTRA_CALL_UUID) + ", number : " + attributeMap.get(EXTRA_CALL_IDENTIFIER) + ", displayName:" + attributeMap.get(EXTRA_CALLER_NAME));
 
                     ComponentName name = reactContext.startService(headlessIntent);
                     if (name != null) {
diff --git a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnection.java b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
index 3deced5..3e4d44b 100644
--- a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
+++ b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
@@ -46,7 +46,7 @@ import static io.wazo.callkeep.Constants.ACTION_MUTE_CALL;
 import static io.wazo.callkeep.Constants.ACTION_UNHOLD_CALL;
 import static io.wazo.callkeep.Constants.ACTION_UNMUTE_CALL;
 import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
-import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
+import static io.wazo.callkeep.Constants.EXTRA_CALL_IDENTIFIER;
 import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;
 
 @TargetApi(Build.VERSION_CODES.M)
@@ -61,11 +61,11 @@ public class VoiceConnection extends Connection {
         this.handle = handle;
         this.context = context;
 
-        String number = handle.get(EXTRA_CALL_NUMBER);
+        String identifier = handle.get(EXTRA_CALL_IDENTIFIER);
         String name = handle.get(EXTRA_CALLER_NAME);
 
-        if (number != null) {
-            setAddress(Uri.parse(number), TelecomManager.PRESENTATION_ALLOWED);
+        if (identifier != null) {
+            setAddress(Uri.parse(identifier), TelecomManager.PRESENTATION_ALLOWED);
         }
         if (name != null && !name.equals("")) {
             setCallerDisplayName(name, TelecomManager.PRESENTATION_ALLOWED);
@@ -96,7 +96,7 @@ public class VoiceConnection extends Connection {
         super.onAnswer();
         Log.d(TAG, "onAnswer called");
 
-        setConnectionCapabilities(getConnectionCapabilities() | Connection.CAPABILITY_HOLD);
+        setConnectionCapabilities(getConnectionCapabilities());
         setAudioModeIsVoip(true);
 
         sendCallRequestToActivity(ACTION_ANSWER_CALL, handle);
diff --git a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
index aa83b53..91cbbe9 100644
--- a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
+++ b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
@@ -61,7 +61,7 @@ import static io.wazo.callkeep.Constants.ACTION_ONGOING_CALL;
 import static io.wazo.callkeep.Constants.ACTION_CHECK_REACHABILITY;
 import static io.wazo.callkeep.Constants.ACTION_WAKE_APP;
 import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
-import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
+import static io.wazo.callkeep.Constants.EXTRA_CALL_IDENTIFIER;
 import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;
 import static io.wazo.callkeep.Constants.EXTRA_DISABLE_ADD_CALL;
 import static io.wazo.callkeep.Constants.FOREGROUND_SERVICE_TYPE_MICROPHONE;
@@ -138,7 +138,7 @@ public class VoiceConnectionService extends ConnectionService {
     @Override
     public Connection onCreateIncomingConnection(PhoneAccountHandle connectionManagerPhoneAccount, ConnectionRequest request) {
         Bundle extra = request.getExtras();
-        Uri number = request.getAddress();
+        Uri identifier = request.getAddress();
         String name = extra.getString(EXTRA_CALLER_NAME);
         Connection incomingCallConnection = createConnection(request);
         incomingCallConnection.setRinging();
@@ -166,27 +166,27 @@ public class VoiceConnectionService extends ConnectionService {
     private Connection makeOutgoingCall(ConnectionRequest request, String uuid, Boolean forceWakeUp) {
         Bundle extras = request.getExtras();
         Connection outgoingCallConnection = null;
-        String number = request.getAddress().getSchemeSpecificPart();
-        String extrasNumber = extras.getString(EXTRA_CALL_NUMBER);
+        String identifier = request.getAddress().getSchemeSpecificPart();
+        String extrasIdentifier = extras.getString(EXTRA_CALL_IDENTIFIER);
         String displayName = extras.getString(EXTRA_CALLER_NAME);
         Boolean isForeground = VoiceConnectionService.isRunning(this.getApplicationContext());
 
-        Log.d(TAG, "makeOutgoingCall:" + uuid + ", number: " + number + ", displayName:" + displayName);
+        Log.d(TAG, "makeOutgoingCall:" + uuid + ", identifier: " + identifier + ", displayName:" + displayName);
 
         // Wakeup application if needed
         if (!isForeground || forceWakeUp) {
             Log.d(TAG, "onCreateOutgoingConnection: Waking up application");
-            this.wakeUpApplication(uuid, number, displayName);
+            this.wakeUpApplication(uuid, identifier, displayName);
         } else if (!this.canMakeOutgoingCall() && isReachable) {
             Log.d(TAG, "onCreateOutgoingConnection: not available");
             return Connection.createFailedConnection(new DisconnectCause(DisconnectCause.LOCAL));
         }
 
         // TODO: Hold all other calls
-        if (extrasNumber == null || !extrasNumber.equals(number)) {
+        if (extrasIdentifier == null || !extrasIdentifier.equals(identifier)) {
             extras.putString(EXTRA_CALL_UUID, uuid);
             extras.putString(EXTRA_CALLER_NAME, displayName);
-            extras.putString(EXTRA_CALL_NUMBER, number);
+            extras.putString(EXTRA_CALL_IDENTIFIER, identifier);
         }
 
         if (!canMakeMultipleCalls) {
@@ -251,15 +251,15 @@ public class VoiceConnectionService extends ConnectionService {
         startForeground(FOREGROUND_SERVICE_TYPE_MICROPHONE, notification);
     }
 
-    private void wakeUpApplication(String uuid, String number, String displayName) {
+    private void wakeUpApplication(String uuid, String identifier, String displayName) {
         Intent headlessIntent = new Intent(
             this.getApplicationContext(),
             RNCallKeepBackgroundMessagingService.class
         );
         headlessIntent.putExtra("callUUID", uuid);
         headlessIntent.putExtra("name", displayName);
-        headlessIntent.putExtra("handle", number);
-        Log.d(TAG, "wakeUpApplication: " + uuid + ", number : " + number + ", displayName:" + displayName);
+        headlessIntent.putExtra("handle", identifier);
+        Log.d(TAG, "wakeUpApplication: " + uuid + ", identifier : " + identifier + ", displayName:" + displayName);
 
         ComponentName name = this.getApplicationContext().startService(headlessIntent);
         if (name != null) {
@@ -273,9 +273,9 @@ public class VoiceConnectionService extends ConnectionService {
         }
         Log.d(TAG, "checkReachability timeout, force wakeup");
         Bundle extras = request.getExtras();
-        String number = request.getAddress().getSchemeSpecificPart();
+        String identifier = request.getAddress().getSchemeSpecificPart();
         String displayName = extras.getString(EXTRA_CALLER_NAME);
-        wakeUpApplication(this.notReachableCallUuid, number, displayName);
+        wakeUpApplication(this.notReachableCallUuid, identifier, displayName);
 
         VoiceConnectionService.currentConnectionRequest = null;
     }
@@ -301,9 +301,9 @@ public class VoiceConnectionService extends ConnectionService {
     private Connection createConnection(ConnectionRequest request) {
         Bundle extras = request.getExtras();
         HashMap<String, String> extrasMap = this.bundleToMap(extras);
-        extrasMap.put(EXTRA_CALL_NUMBER, request.getAddress().toString());
+        extrasMap.put(EXTRA_CALL_IDENTIFIER, request.getAddress().toString());
         VoiceConnection connection = new VoiceConnection(this, extrasMap);
-        connection.setConnectionCapabilities(Connection.CAPABILITY_MUTE | Connection.CAPABILITY_SUPPORT_HOLD);
+        connection.setConnectionCapabilities(Connection.CAPABILITY_MUTE);
         connection.setInitializing();
         connection.setExtras(extras);
         currentConnections.put(extras.getString(EXTRA_CALL_UUID), connection);
diff --git a/node_modules/react-native-callkeep/index.js b/node_modules/react-native-callkeep/index.js
index 6ec6c20..27a6788 100644
--- a/node_modules/react-native-callkeep/index.js
+++ b/node_modules/react-native-callkeep/index.js
@@ -73,7 +73,7 @@ class RNCallKeep {
 
   displayIncomingCall = (uuid, handle, localizedCallerName = '', handleType = 'number', hasVideo = false, options = null) => {
     if (!isIOS) {
-      RNCallKeepModule.displayIncomingCall(uuid, handle, localizedCallerName);
+      RNCallKeepModule.displayIncomingCall(uuid, handle, handleType, hasVideo, localizedCallerName);
       return;
     }
 
@@ -94,7 +94,7 @@ class RNCallKeep {
 
   startCall = (uuid, handle, contactIdentifier, handleType = 'number', hasVideo = false ) => {
     if (!isIOS) {
-      RNCallKeepModule.startCall(uuid, handle, contactIdentifier);
+      RNCallKeepModule.startCall(uuid, handle, contactIdentifier, handleType, hasVideo);
       return;
     }
 
diff --git a/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.m b/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.m
index 04af403..f6caf24 100644
--- a/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.m
+++ b/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.m
@@ -285,7 +285,7 @@ + (void)initCallKitProvider {
     NSLog(@"[RNCallKeep][updateDisplay] uuidString = %@ displayName = %@ uri = %@", uuidString, displayName, uri);
 #endif
     NSUUID *uuid = [[NSUUID alloc] initWithUUIDString:uuidString];
-    CXHandle *callHandle = [[CXHandle alloc] initWithType:CXHandleTypePhoneNumber value:uri];
+    CXHandle *callHandle = [[CXHandle alloc] initWithType:CXHandleTypeGeneric value:uri];
     CXCallUpdate *callUpdate = [[CXCallUpdate alloc] init];
     callUpdate.localizedCallerName = displayName;
     callUpdate.remoteHandle = callHandle;
@@ -511,7 +511,7 @@ + (CXProviderConfiguration *)getProviderConfiguration:(NSDictionary*)settings
         int _handleType = [RNCallKeep getHandleType:settings[@"handleType"]];
         providerConfiguration.supportedHandleTypes = [NSSet setWithObjects:[NSNumber numberWithInteger:_handleType], nil];
     }else{
-        providerConfiguration.supportedHandleTypes = [NSSet setWithObjects:[NSNumber numberWithInteger:CXHandleTypePhoneNumber], nil];
+        providerConfiguration.supportedHandleTypes = [NSSet setWithObjects:[NSNumber numberWithInteger:CXHandleTypeGeneric], nil];
     }
     if (settings[@"supportsVideo"]) {
         providerConfiguration.supportsVideo = [settings[@"supportsVideo"] boolValue];
diff --git a/node_modules/react-native-callkeep/react-native-callkeep.patch b/node_modules/react-native-callkeep/react-native-callkeep.patch
new file mode 100644
index 0000000..f441e61
--- /dev/null
+++ b/node_modules/react-native-callkeep/react-native-callkeep.patch
@@ -0,0 +1,328 @@
+diff --git a/android/src/main/java/io/wazo/callkeep/Constants.java b/android/src/main/java/io/wazo/callkeep/Constants.java
+index e0b8bc5..b48417a 100644
+--- a/android/src/main/java/io/wazo/callkeep/Constants.java
++++ b/android/src/main/java/io/wazo/callkeep/Constants.java
+@@ -13,7 +13,7 @@ public class Constants {
+     public static final String ACTION_UNMUTE_CALL = "ACTION_UNMUTE_CALL";
+     public static final String ACTION_WAKE_APP = "ACTION_WAKE_APP";
+ 
+-    public static final String EXTRA_CALL_NUMBER = "EXTRA_CALL_NUMBER";
++    public static final String EXTRA_CALL_IDENTIFIER = "EXTRA_CALL_NUMBER";
+     public static final String EXTRA_CALL_UUID = "EXTRA_CALL_UUID";
+     public static final String EXTRA_CALLER_NAME = "EXTRA_CALLER_NAME";
+     // Can't use telecom.EXTRA_DISABLE_ADD_CALL ...
+diff --git a/android/src/main/java/io/wazo/callkeep/RNCallKeepBackgroundMessagingService.java b/android/src/main/java/io/wazo/callkeep/RNCallKeepBackgroundMessagingService.java
+index c069072..a1e49ce 100644
+--- a/android/src/main/java/io/wazo/callkeep/RNCallKeepBackgroundMessagingService.java
++++ b/android/src/main/java/io/wazo/callkeep/RNCallKeepBackgroundMessagingService.java
+@@ -27,7 +27,7 @@ import com.facebook.react.bridge.Arguments;
+ import com.facebook.react.jstasks.HeadlessJsTaskConfig;
+ 
+ import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
+-import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
++import static io.wazo.callkeep.Constants.EXTRA_CALL_IDENTIFIER;
+ import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;
+ 
+ import javax.annotation.Nullable;
+diff --git a/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java b/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
+index 327d49b..7372350 100644
+--- a/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
++++ b/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
+@@ -44,6 +44,7 @@ import android.telecom.DisconnectCause;
+ import android.telecom.PhoneAccount;
+ import android.telecom.PhoneAccountHandle;
+ import android.telecom.TelecomManager;
++import android.telecom.VideoProfile;
+ import android.telephony.TelephonyManager;
+ import android.util.Log;
+ 
+@@ -73,7 +74,7 @@ import static androidx.core.app.ActivityCompat.requestPermissions;
+ 
+ import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
+ import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;
+-import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
++import static io.wazo.callkeep.Constants.EXTRA_CALL_IDENTIFIER;
+ import static io.wazo.callkeep.Constants.ACTION_END_CALL;
+ import static io.wazo.callkeep.Constants.ACTION_ANSWER_CALL;
+ import static io.wazo.callkeep.Constants.ACTION_MUTE_CALL;
+@@ -155,20 +156,24 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
+     }
+ 
+     @ReactMethod
+-    public void displayIncomingCall(String uuid, String number, String callerName) {
++    public void displayIncomingCall(String uuid, String identifier, String callerType, boolean callHasVideo, String callerName) {
+         if (!isConnectionServiceAvailable() || !hasPhoneAccount()) {
+             return;
+         }
+ 
+-        Log.d(TAG, "displayIncomingCall number: " + number + ", callerName: " + callerName);
++        Log.d(TAG, "displayIncomingCall identifier: " + identifier + ", callerName: " + callerName + ", callerType: " + callerType + ", callHasVideo: " + callHasVideo);
+ 
+         Bundle extras = new Bundle();
+-        Uri uri = Uri.fromParts(PhoneAccount.SCHEME_TEL, number, null);
++        Uri uri = Uri.fromParts((callerType.equals("sip") ? PhoneAccount.SCHEME_SIP : PhoneAccount.SCHEME_TEL), identifier, null);
+ 
+         extras.putParcelable(TelecomManager.EXTRA_INCOMING_CALL_ADDRESS, uri);
+         extras.putString(EXTRA_CALLER_NAME, callerName);
+         extras.putString(EXTRA_CALL_UUID, uuid);
+ 
++        if (callHasVideo) {
++            extras.putInt(TelecomManager.EXTRA_START_CALL_WITH_VIDEO_STATE, VideoProfile.STATE_BIDIRECTIONAL);
++        }
++
+         telecomManager.addNewIncomingCall(handle, extras);
+     }
+ 
+@@ -187,24 +192,28 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
+     }
+ 
+     @ReactMethod
+-    public void startCall(String uuid, String number, String callerName) {
+-        if (!isConnectionServiceAvailable() || !hasPhoneAccount() || !hasPermissions() || number == null) {
++    public void startCall(String uuid, String identifer, String callerName, String callerType, boolean callHasVideo) {
++        if (!isConnectionServiceAvailable() || !hasPhoneAccount() || !hasPermissions() || identifer == null) {
+             return;
+         }
+ 
+-        Log.d(TAG, "startCall number: " + number + ", callerName: " + callerName);
++        Log.d(TAG, "startCall identifer: " + identifer + ", callerName: " + callerName + ", callerType: " + callerType + ", callHasVideo: " + callHasVideo);
+ 
+         Bundle extras = new Bundle();
+-        Uri uri = Uri.fromParts(PhoneAccount.SCHEME_TEL, number, null);
++        Uri uri = Uri.fromParts((callerType.equals("sip") ? PhoneAccount.SCHEME_SIP : PhoneAccount.SCHEME_TEL), identifer, null);
+ 
+         Bundle callExtras = new Bundle();
+         callExtras.putString(EXTRA_CALLER_NAME, callerName);
+         callExtras.putString(EXTRA_CALL_UUID, uuid);
+-        callExtras.putString(EXTRA_CALL_NUMBER, number);
++        callExtras.putString(EXTRA_CALL_IDENTIFIER, identifer);
+ 
+         extras.putParcelable(TelecomManager.EXTRA_PHONE_ACCOUNT_HANDLE, handle);
+         extras.putParcelable(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, callExtras);
+ 
++        if (callHasVideo) {
++            extras.putInt(TelecomManager.EXTRA_INCOMING_VIDEO_STATE, VideoProfile.STATE_BIDIRECTIONAL);
++        }
++
+         telecomManager.placeCall(uri, extras);
+     }
+ 
+@@ -485,7 +494,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
+             return;
+         }
+ 
+-        conn.setConnectionCapabilities(conn.getConnectionCapabilities() | Connection.CAPABILITY_HOLD);
++        conn.setConnectionCapabilities(conn.getConnectionCapabilities());
+         conn.setActive();
+     }
+ 
+@@ -575,7 +584,8 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
+         String appName = this.getApplicationName(this.getAppContext());
+ 
+         PhoneAccount.Builder builder = new PhoneAccount.Builder(handle, appName)
+-                .setCapabilities(PhoneAccount.CAPABILITY_CALL_PROVIDER);
++                .addSupportedUriScheme(PhoneAccount.SCHEME_SIP)
++                .setCapabilities(PhoneAccount.CAPABILITY_CALL_PROVIDER | PhoneAccount.CAPABILITY_VIDEO_CALLING);
+ 
+         if (_settings != null && _settings.hasKey("imageName")) {
+             int identifier = appContext.getResources().getIdentifier(_settings.getString("imageName"), "drawable", appContext.getPackageName());
+@@ -700,7 +710,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
+                     sendEventToJS("RNCallKeepDidPerformDTMFAction", args);
+                     break;
+                 case ACTION_ONGOING_CALL:
+-                    args.putString("handle", attributeMap.get(EXTRA_CALL_NUMBER));
++                    args.putString("handle", attributeMap.get(EXTRA_CALL_IDENTIFIER));
+                     args.putString("callUUID", attributeMap.get(EXTRA_CALL_UUID));
+                     args.putString("name", attributeMap.get(EXTRA_CALLER_NAME));
+                     sendEventToJS("RNCallKeepDidReceiveStartCallAction", args);
+@@ -715,8 +725,8 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule {
+                     Intent headlessIntent = new Intent(reactContext, RNCallKeepBackgroundMessagingService.class);
+                     headlessIntent.putExtra("callUUID", attributeMap.get(EXTRA_CALL_UUID));
+                     headlessIntent.putExtra("name", attributeMap.get(EXTRA_CALLER_NAME));
+-                    headlessIntent.putExtra("handle", attributeMap.get(EXTRA_CALL_NUMBER));
+-                    Log.d(TAG, "wakeUpApplication: " + attributeMap.get(EXTRA_CALL_UUID) + ", number : " + attributeMap.get(EXTRA_CALL_NUMBER) + ", displayName:" + attributeMap.get(EXTRA_CALLER_NAME));
++                    headlessIntent.putExtra("handle", attributeMap.get(EXTRA_CALL_IDENTIFIER));
++                    Log.d(TAG, "wakeUpApplication: " + attributeMap.get(EXTRA_CALL_UUID) + ", number : " + attributeMap.get(EXTRA_CALL_IDENTIFIER) + ", displayName:" + attributeMap.get(EXTRA_CALLER_NAME));
+ 
+                     ComponentName name = reactContext.startService(headlessIntent);
+                     if (name != null) {
+diff --git a/android/src/main/java/io/wazo/callkeep/VoiceConnection.java b/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
+index 3deced5..3e4d44b 100644
+--- a/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
++++ b/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
+@@ -46,7 +46,7 @@ import static io.wazo.callkeep.Constants.ACTION_MUTE_CALL;
+ import static io.wazo.callkeep.Constants.ACTION_UNHOLD_CALL;
+ import static io.wazo.callkeep.Constants.ACTION_UNMUTE_CALL;
+ import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
+-import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
++import static io.wazo.callkeep.Constants.EXTRA_CALL_IDENTIFIER;
+ import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;
+ 
+ @TargetApi(Build.VERSION_CODES.M)
+@@ -61,11 +61,11 @@ public class VoiceConnection extends Connection {
+         this.handle = handle;
+         this.context = context;
+ 
+-        String number = handle.get(EXTRA_CALL_NUMBER);
++        String identifier = handle.get(EXTRA_CALL_IDENTIFIER);
+         String name = handle.get(EXTRA_CALLER_NAME);
+ 
+-        if (number != null) {
+-            setAddress(Uri.parse(number), TelecomManager.PRESENTATION_ALLOWED);
++        if (identifier != null) {
++            setAddress(Uri.parse(identifier), TelecomManager.PRESENTATION_ALLOWED);
+         }
+         if (name != null && !name.equals("")) {
+             setCallerDisplayName(name, TelecomManager.PRESENTATION_ALLOWED);
+@@ -96,7 +96,7 @@ public class VoiceConnection extends Connection {
+         super.onAnswer();
+         Log.d(TAG, "onAnswer called");
+ 
+-        setConnectionCapabilities(getConnectionCapabilities() | Connection.CAPABILITY_HOLD);
++        setConnectionCapabilities(getConnectionCapabilities());
+         setAudioModeIsVoip(true);
+ 
+         sendCallRequestToActivity(ACTION_ANSWER_CALL, handle);
+diff --git a/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java b/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
+index aa83b53..91cbbe9 100644
+--- a/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
++++ b/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
+@@ -61,7 +61,7 @@ import static io.wazo.callkeep.Constants.ACTION_ONGOING_CALL;
+ import static io.wazo.callkeep.Constants.ACTION_CHECK_REACHABILITY;
+ import static io.wazo.callkeep.Constants.ACTION_WAKE_APP;
+ import static io.wazo.callkeep.Constants.EXTRA_CALLER_NAME;
+-import static io.wazo.callkeep.Constants.EXTRA_CALL_NUMBER;
++import static io.wazo.callkeep.Constants.EXTRA_CALL_IDENTIFIER;
+ import static io.wazo.callkeep.Constants.EXTRA_CALL_UUID;
+ import static io.wazo.callkeep.Constants.EXTRA_DISABLE_ADD_CALL;
+ import static io.wazo.callkeep.Constants.FOREGROUND_SERVICE_TYPE_MICROPHONE;
+@@ -138,7 +138,7 @@ public class VoiceConnectionService extends ConnectionService {
+     @Override
+     public Connection onCreateIncomingConnection(PhoneAccountHandle connectionManagerPhoneAccount, ConnectionRequest request) {
+         Bundle extra = request.getExtras();
+-        Uri number = request.getAddress();
++        Uri identifier = request.getAddress();
+         String name = extra.getString(EXTRA_CALLER_NAME);
+         Connection incomingCallConnection = createConnection(request);
+         incomingCallConnection.setRinging();
+@@ -166,27 +166,27 @@ public class VoiceConnectionService extends ConnectionService {
+     private Connection makeOutgoingCall(ConnectionRequest request, String uuid, Boolean forceWakeUp) {
+         Bundle extras = request.getExtras();
+         Connection outgoingCallConnection = null;
+-        String number = request.getAddress().getSchemeSpecificPart();
+-        String extrasNumber = extras.getString(EXTRA_CALL_NUMBER);
++        String identifier = request.getAddress().getSchemeSpecificPart();
++        String extrasIdentifier = extras.getString(EXTRA_CALL_IDENTIFIER);
+         String displayName = extras.getString(EXTRA_CALLER_NAME);
+         Boolean isForeground = VoiceConnectionService.isRunning(this.getApplicationContext());
+ 
+-        Log.d(TAG, "makeOutgoingCall:" + uuid + ", number: " + number + ", displayName:" + displayName);
++        Log.d(TAG, "makeOutgoingCall:" + uuid + ", identifier: " + identifier + ", displayName:" + displayName);
+ 
+         // Wakeup application if needed
+         if (!isForeground || forceWakeUp) {
+             Log.d(TAG, "onCreateOutgoingConnection: Waking up application");
+-            this.wakeUpApplication(uuid, number, displayName);
++            this.wakeUpApplication(uuid, identifier, displayName);
+         } else if (!this.canMakeOutgoingCall() && isReachable) {
+             Log.d(TAG, "onCreateOutgoingConnection: not available");
+             return Connection.createFailedConnection(new DisconnectCause(DisconnectCause.LOCAL));
+         }
+ 
+         // TODO: Hold all other calls
+-        if (extrasNumber == null || !extrasNumber.equals(number)) {
++        if (extrasIdentifier == null || !extrasIdentifier.equals(identifier)) {
+             extras.putString(EXTRA_CALL_UUID, uuid);
+             extras.putString(EXTRA_CALLER_NAME, displayName);
+-            extras.putString(EXTRA_CALL_NUMBER, number);
++            extras.putString(EXTRA_CALL_IDENTIFIER, identifier);
+         }
+ 
+         if (!canMakeMultipleCalls) {
+@@ -251,15 +251,15 @@ public class VoiceConnectionService extends ConnectionService {
+         startForeground(FOREGROUND_SERVICE_TYPE_MICROPHONE, notification);
+     }
+ 
+-    private void wakeUpApplication(String uuid, String number, String displayName) {
++    private void wakeUpApplication(String uuid, String identifier, String displayName) {
+         Intent headlessIntent = new Intent(
+             this.getApplicationContext(),
+             RNCallKeepBackgroundMessagingService.class
+         );
+         headlessIntent.putExtra("callUUID", uuid);
+         headlessIntent.putExtra("name", displayName);
+-        headlessIntent.putExtra("handle", number);
+-        Log.d(TAG, "wakeUpApplication: " + uuid + ", number : " + number + ", displayName:" + displayName);
++        headlessIntent.putExtra("handle", identifier);
++        Log.d(TAG, "wakeUpApplication: " + uuid + ", identifier : " + identifier + ", displayName:" + displayName);
+ 
+         ComponentName name = this.getApplicationContext().startService(headlessIntent);
+         if (name != null) {
+@@ -273,9 +273,9 @@ public class VoiceConnectionService extends ConnectionService {
+         }
+         Log.d(TAG, "checkReachability timeout, force wakeup");
+         Bundle extras = request.getExtras();
+-        String number = request.getAddress().getSchemeSpecificPart();
++        String identifier = request.getAddress().getSchemeSpecificPart();
+         String displayName = extras.getString(EXTRA_CALLER_NAME);
+-        wakeUpApplication(this.notReachableCallUuid, number, displayName);
++        wakeUpApplication(this.notReachableCallUuid, identifier, displayName);
+ 
+         VoiceConnectionService.currentConnectionRequest = null;
+     }
+@@ -301,9 +301,9 @@ public class VoiceConnectionService extends ConnectionService {
+     private Connection createConnection(ConnectionRequest request) {
+         Bundle extras = request.getExtras();
+         HashMap<String, String> extrasMap = this.bundleToMap(extras);
+-        extrasMap.put(EXTRA_CALL_NUMBER, request.getAddress().toString());
++        extrasMap.put(EXTRA_CALL_IDENTIFIER, request.getAddress().toString());
+         VoiceConnection connection = new VoiceConnection(this, extrasMap);
+-        connection.setConnectionCapabilities(Connection.CAPABILITY_MUTE | Connection.CAPABILITY_SUPPORT_HOLD);
++        connection.setConnectionCapabilities(Connection.CAPABILITY_MUTE);
+         connection.setInitializing();
+         connection.setExtras(extras);
+         currentConnections.put(extras.getString(EXTRA_CALL_UUID), connection);
+diff --git a/index.js b/index.js
+index 6ec6c20..27a6788 100644
+--- a/index.js
++++ b/index.js
+@@ -73,7 +73,7 @@ class RNCallKeep {
+ 
+   displayIncomingCall = (uuid, handle, localizedCallerName = '', handleType = 'number', hasVideo = false, options = null) => {
+     if (!isIOS) {
+-      RNCallKeepModule.displayIncomingCall(uuid, handle, localizedCallerName);
++      RNCallKeepModule.displayIncomingCall(uuid, handle, handleType, hasVideo, localizedCallerName);
+       return;
+     }
+ 
+@@ -94,7 +94,7 @@ class RNCallKeep {
+ 
+   startCall = (uuid, handle, contactIdentifier, handleType = 'number', hasVideo = false ) => {
+     if (!isIOS) {
+-      RNCallKeepModule.startCall(uuid, handle, contactIdentifier);
++      RNCallKeepModule.startCall(uuid, handle, contactIdentifier, handleType, hasVideo);
+       return;
+     }
+ 
+diff --git a/ios/RNCallKeep/RNCallKeep.m b/ios/RNCallKeep/RNCallKeep.m
+index 04af403..f6caf24 100644
+--- a/ios/RNCallKeep/RNCallKeep.m
++++ b/ios/RNCallKeep/RNCallKeep.m
+@@ -285,7 +285,7 @@ RCT_EXPORT_METHOD(updateDisplay:(NSString *)uuidString :(NSString *)displayName
+     NSLog(@"[RNCallKeep][updateDisplay] uuidString = %@ displayName = %@ uri = %@", uuidString, displayName, uri);
+ #endif
+     NSUUID *uuid = [[NSUUID alloc] initWithUUIDString:uuidString];
+-    CXHandle *callHandle = [[CXHandle alloc] initWithType:CXHandleTypePhoneNumber value:uri];
++    CXHandle *callHandle = [[CXHandle alloc] initWithType:CXHandleTypeGeneric value:uri];
+     CXCallUpdate *callUpdate = [[CXCallUpdate alloc] init];
+     callUpdate.localizedCallerName = displayName;
+     callUpdate.remoteHandle = callHandle;
+@@ -511,7 +511,7 @@ RCT_EXPORT_METHOD(isCallActive:(NSString *)uuidString)
+         int _handleType = [RNCallKeep getHandleType:settings[@"handleType"]];
+         providerConfiguration.supportedHandleTypes = [NSSet setWithObjects:[NSNumber numberWithInteger:_handleType], nil];
+     }else{
+-        providerConfiguration.supportedHandleTypes = [NSSet setWithObjects:[NSNumber numberWithInteger:CXHandleTypePhoneNumber], nil];
++        providerConfiguration.supportedHandleTypes = [NSSet setWithObjects:[NSNumber numberWithInteger:CXHandleTypeGeneric], nil];
+     }
+     if (settings[@"supportsVideo"]) {
+         providerConfiguration.supportsVideo = [settings[@"supportsVideo"] boolValue];
